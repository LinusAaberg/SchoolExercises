Chalmers and the University of Gothenburg - CTH/GU
Computer Science and Engineering Department
BSc. in Software Engineering and Management
DIT042 - Object-oriented Programming




Exercises - Introduction to OO Programming


Code a solution to the questions below. See if you can notice the effort needed in changing codes between part 1 and part 2, and the impact of changes in OO programming. :) Part 3 is an extra challenge where you will play with two objects at once.
Lvl. 1: Creating classes and objects


1. You are writing a code for a car rental company. Create a class to represent a car in your company. Each car has a name, and a daily rental price. The user should be able to retrieve the car’s name and its daily price. In addition, a user can ask the total price to rent the car for X days. See example of the main below


public class CarRental{
        public static void main(String[] args){
                Car car1 = new Car("Volvo", 210.50);
                Car car2 = new Car("Ferrari", 550.00);
                
                System.out.println(car1.getName()+" costs "+car1.getDailyPrice()+
                               " SEKs per day.");
                System.out.println(car2.getName()+" costs "+car2.getDailyPrice()+
                               " SEKs per day.");
                
                int days = 5; //this indicates how many days you will rent the car.
                System.out.println(car1.getName()+" costs "+car1.calculateRent(days)+
                               " SEKs for "+days+" day.");
        }
}
	



2. You are writing code for a bank. Create a class to represent a bank account. Each account has the name of the account owner and a balance. A user should be able to check the owner’s name and the account balance. In addition, the user can deposit and withdraw money. Then, create a main class with the following procedure:
   1. Create 3 accounts: (Eve, 1000.39); (John, 500000.00); (Mary, 12540000.99)
   2. Withdraw 500 from each account.
   3. Print each  account balance  (Eve, 500.39); (John, 499500.00); (Mary, 12539500.99)
   4. Deposit 1500 in each account
   5. Print each account balance  (Eve, 2000.39); (John, 501000.00); (Mary, 12541000.99)


3. You are writing a code for Netflix. Create a class to represent a movie (only movies for now). Each movie has a title, the year it was released, an integer specifying its length (in minutes), and an integer representing the evaluation of that movie. The evaluation begins at zero when the movie is created. A user should be able to check the movie’s title, release year and length. A user can also like or dislike the movie. When liking a movie (e.g. movie.like()) the number of likes of that movie is increased by 1. Similarly, when disliking will reduce the movie’s evaluation by 1. Note that a movie evaluation cannot be negative.


4. You are creating an RPG game. One of the main characteristics of an RPG is the skillset of a hero. Create a class to represent a Skill. Each skill has a name, an integer representing its damage, and an energy cost that is required to use the skill (we refer to that energy as mana). A user can check the skill’s name, damage and mana cost. In addition, create a method where the skill is used. Whenever used, a skill should just print the following message:


“<skill name> causes <damage> of damage. (costs <mana cost> mana)”


        Use the main below to execute your class:


public class BattleField{
        public static void main(String[] args){
                Skill fireball = new Skill(“Fire Ball”,60,5);
                Skill iceMissile = new Skill(“Ice Missile”,20,3);


                fireball.useSkill(): 
//Should print: 
//Fire Ball causes 60 damage. (costs 5 mana)


iceMissile.useSkill();
//Should print: 
//Ice Missile causes 20 damage. (costs 3 mana)
        }
}
	        
5. Continuing your RPG game. Create a class to represent a Hero. Each hero has a name, an integer representing his/her health points (HP), and his/her mana points (MP). All heroes begin with 100 HP and 100 mana. A user can check the hero’s name, HP and mana cost. In addition, each hero can take damage, spend mana, heal mana and heal HP.


Taking damage: A user specifies the amount of damage (X)  the hero takes. Then the hero subtracts X from his/her HP. If the hero’s HP reaches zero or less, your hero should print 
“I died!... But I regret nothing!”


Spend Mana: A user specifies the amount of mana (X) that the hero will spend. Then the hero subtracts X from his/her mana. Note that the mana cannot go below zero. If the amount to spend is higher than the current hero’s mana, then mana is set to zero.


Healing HP: A user specifies the amount of HP (X) that the hero heals. Then the hero adds X to his/her HP.


Replenishing Mana: The heroes replenish mana at a constant rate. When a user prompts the hero to replenish mana, add 15 mana to his/her current mana. Note that mana cannot be higher than 100, or less than 0.


To test your program, create a main class with the following procedure:
   6. Create 3 heroes: (Batman); (Deadpool); (Samus)
   7. Damage Samus with 50 HP //ROUND 1
   8. Damage Deadpool with 90 HP
   9. Spend 50 mana from Batman
   10. Print each hero’s mana and HP: E.g.: (Name, HP, Mana)
      1. (Batman,100,50); (Deadpool,10,100); (Samus,50,100)
   11. Heal Deadpool for 50 HP //ROUND 2
   12. Spend 60 mana for Batman
   13. Damage Samus for 40 HP
   14. Print each hero’s mana and HP: 
      1. (Batman,100,0); (Deadpool,60,100); (Samus,10,100)
   15. Spend 100 mana from Samus //ROUND 3: Final round
   16. Damage Deadpool for 80 HP //should print “I died!... But I regret nothing!”
   17. Damage Batman for 80 HP
   18. Print each hero’s mana and HP: 
      1. (Batman,20,0); (Deadpool,-20,100); (Samus,10,0)
Part 2: Evolving your classes


6. Modify your Account to include an ID, since you will need to identify the back account regardless of its owner. The ID is a String value.


7. Modify your Account to allow loans when withdrawing any amount. When trying to withdraw an amount higher than your current balance, your balance will be negative. Then, whenever the user performs a deposit with a negative balance, the account will withdraw 10% of the deposited amount as compensation for taking a loan. If the balance is not negative, no compensation is taken from the deposit.


8. Modify your skill class to allow skills to also have an elemental type. Remember to update your main class since now you will need to specify the elemental type of a skill when creating it. For instance:


Skill iceMissile = new Skill(“Ice Missile”,20,3, “Ice”);
Skill fireball = new Skill(“Fire Ball”,60,5, “Fire”);
Skill atomicKick = new Skill(“Atomic Kick”,35,4, “Physical”);


Part 3: Extra question (challenge)


9. Modify your Hero class to allow heroes to damage each other. Create a method attack(Hero targetHero, int damage). In the method attack, your hero will damage another hero reducing its HP based on the specified damage. Each attack must reduce the mana of the attacking hero by 25.


10. Modify your Hero class to allow heroes to use the ultimate ability. An ultimate ability uses as input just a target hero, and it will cost 70 mana and damages the target hero for 80 HP.


11. Do an area attack that receives as input several heroes. The hero loses 40 mana to damage each specified target hero for 30 HP.
        
Tip: The secret is understanding that you will have two distinct objects with corresponding references. One is the “current hero attacking” (referenced by “this”) and the target hero that will receive the damage (the targetHero reference in the method above). Then you need to figure out how to reduce the mana of the current hero, and reduce the HP of the target hero.


        Create a Main to test your class.


Part 4: Taking it to the next level


* For each program above (RPG game, Bank, Car rental, etc.) write, in your main class, a method that will read information from the console to determine the information passed to the objects. For instance, the name and daily price of a car, the account owner and the starting balance for the account, the skill’s name, damage and mana cost, and so on.
* After creating the code that reads that information, make sure you create the objects properly calling each class’s constructor.


Part 5: Challenge during supervision


1- Write a program for a dynamic array. Begin with an array of size 5, but the user can add more than 5 elements to the array. Upon trying to add the fifth number, you will notice that the new elements do not fit in the array.


Your program should receive an array of Person objects and make sure that you can add as many people as you want to your array.